// index.js
require('dotenv').config();
const { Client, GatewayIntentBits, EmbedBuilder, ChannelType } = require('discord.js');
const fetch = global.fetch ?? require('node-fetch');

// ====== ENV ======
const TOKEN = process.env.DISCORD_TOKEN;
const PREFIX = process.env.PREFIX || '!';
const GEMINI_PROVIDER = (process.env.GEMINI_PROVIDER || 'google').toLowerCase();
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || '';
const GEMINI_MODEL = process.env.GEMINI_MODEL || 'gemini-1.5-flash';
const GENERIC_ENDPOINT = process.env.GEMINI_ENDPOINT || '';

const AUTO_REPLY = (process.env.AUTO_REPLY || 'off').toLowerCase() === 'on';
const ALLOWED_CHANNELS = (process.env.AUTO_REPLY_CHANNELS || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);
const COOLDOWN_S = Number(process.env.AUTO_REPLY_COOLDOWN_SECONDS || 15);
const MAX_PER_MIN = Number(process.env.AUTO_REPLY_MAX_PER_MIN || 12);
const USE_THREADS = (process.env.AUTO_REPLY_USE_THREADS || 'off').toLowerCase() === 'on';

if (!TOKEN) {
  console.error('ERROR: DISCORD_TOKEN not set in .env');
  process.exit(1);
}

// ====== DISCORD CLIENT ======
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

client.once('ready', () => {
  console.log(`Logged in as ${client.user.tag}`);
  console.log(`Auto-reply: ${AUTO_REPLY ? 'ON' : 'OFF'}`);
  if (ALLOWED_CHANNELS.length) {
    console.log(`üì∫ Allowed channels: ${ALLOWED_CHANNELS.join(', ')}`);
  } else {
    console.log('üì∫ Allowed channels: ALL (no filter)');
  }
});

// ====== ROCKET CAMP DATA (same as before, trimmed here for brevity) ======
const CAMP_OVERVIEW = {
  title: 'AC x KMUTT Rocket Camp 2025 ‚Äî Operated by DTI',
  desc: [
    '‡∏Ñ‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏ä‡∏ß‡∏ô‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏≠‡∏ß‡∏Å‡∏≤‡∏®‡∏à‡∏ô‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á!',
    '‡∏õ‡∏µ‡∏ô‡∏µ‡πâ‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠: SPACE AC Institute of Technology √ó ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°‡∏à‡∏ò. √ó DTI √ó PTT',
    '‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö/‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏ó‡∏î‡∏™‡∏≠‡∏ö Sounding Rocket ‡∏Ç‡∏ô‡∏≤‡∏î 5 ‡∏ô‡∏¥‡πâ‡∏ß ‡∏¢‡∏≤‡∏ß ~1.5 ‡∏°. ‡∏¢‡∏¥‡∏á‡∏™‡∏π‡∏á ~1 ‡∏Å‡∏°.',
    '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö: ‡∏ô‡∏£. ‡∏°.‡∏õ‡∏•‡∏≤‡∏¢ ‡∏™‡∏ô‡πÉ‡∏à‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°/‡∏≠‡∏ß‡∏Å‡∏≤‡∏®',
  ].join('\n'),
  where1: '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ø @ ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏±‡∏™‡∏™‡∏±‡∏°‡∏ä‡∏±‡∏ç (Workshop 1‚Äì3 ‡∏ï.‡∏Ñ. 2025)',
  where2: '‡∏ß‡∏±‡∏á‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ß‡∏±‡∏•‡πÄ‡∏•‡∏¢‡πå ‡∏à.‡∏£‡∏∞‡∏¢‡∏≠‡∏á (6‚Äì10 ‡∏ï.‡∏Ñ. 2025)',
  perks: [
    'Top 3 ‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡πà‡∏≠ ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°‡∏à‡∏ò.',
    'Study visit ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏á‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ß‡∏±‡∏•‡πÄ‡∏•‡∏¢‡πå (T-CAV, Smart Greenhouse ‡πÇ‡∏î‡∏¢ ‡∏™‡∏ß‡∏ó‡∏ä.)',
    '‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: CAD, 3D Printing, ‡∏ß‡∏á‡∏à‡∏£, Coding',
    '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ESRA/NASA',
    '‡∏™‡∏≠‡∏ô‡πÇ‡∏î‡∏¢ DTI, ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ‡∏°‡∏à‡∏ò., ‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏à‡∏±‡∏¢/‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£ PTT',
  ],
  forms: {
    individual: 'https://go.spaceac.tech/rocket-camp-2025-form',
    team: 'https://go.spaceac.tech/rocket-camp-2025-team',
    line: 'https://lin.ee/W4dKV7D',
    facebook: 'https://go.spaceac.tech/facebook',
  },
  pricing: {
    spectator: 2000,
    individual: 12345,
    team: 100000,
    teamNotes: [
      '(Option A) ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏¢‡∏õ‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ 20%',
      '(Option B) ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏π‡∏ô‡∏¢‡πå DREAM Maker Space 50%',
      '‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå 3D Printing 77 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
    ],
    earlyNotes: [
      'Early Bird / Early Flock ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß',
      '‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß: 3D Printing ‡∏ü‡∏£‡∏µ 15 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (5 ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏£‡∏Å ‚Äî ‡πÄ‡∏ï‡πá‡∏°)',
      '‡∏ó‡∏µ‡∏°: 3D Printing ‡∏ü‡∏£‡∏µ 140 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏ó‡∏µ‡∏°‡πÅ‡∏£‡∏Å ‚Äî ‡πÄ‡∏ï‡πá‡∏°)',
    ],
  },
};

const VENUES = [
  { name: '‡∏ß‡∏±‡∏á‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ß‡∏±‡∏•‡πÄ‡∏•‡∏¢‡πå ‡∏£‡∏∞‡∏¢‡∏≠‡∏á (Wangchan Valley)', url: 'https://maps.app.goo.gl/rmx8v35oLzxpFVXx7' },
  { name: 'The EnCony @Wangchan Valley (‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å)', url: 'https://maps.app.goo.gl/Kyy2FwxVzWXQaRvx9' },
  { name: '‡∏®‡∏π‡∏ô‡∏¢‡πå DREAM Maker Space @‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏±‡∏™‡∏™‡∏±‡∏°‡∏ä‡∏±‡∏ç', url: 'https://maps.app.goo.gl/YWmYkq8vHaWsAeyN9' },
];

const SCHEDULE = {
  workshop: [
    { date: '1/10/2568', items: ['07:30 ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', '08:00‚Äì12:00 Fundamental of Rocket (DTI)', '13:00‚Äì16:00 ‡∏£‡πà‡∏°‡∏ä‡∏π‡∏ä‡∏µ‡∏û / 3D / OpenRocket', '16:00 ‡∏õ‡∏¥‡∏î‡∏ê‡∏≤‡∏ô'] },
    { date: '2/10/2568', items: ['07:30 ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', '08:00‚Äì12:00 ‡∏Ñ‡∏£‡∏µ‡∏ö/‡∏ß‡∏á‡∏à‡∏£/‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°', '13:00‚Äì16:00 ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏à‡∏£‡∏ß‡∏î (KMUTT) / ‡∏ß‡∏á‡∏à‡∏£ / ‡πÇ‡∏Ñ‡πâ‡∏î', '16:00 ‡∏õ‡∏¥‡∏î‡∏ê‡∏≤‡∏ô'] },
    { date: '3/10/2568', items: ['07:30 ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', '08:00‚Äì12:00 Deployment (KMUTT) / ‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô&‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î (DTI)', '13:00‚Äì15:00 ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢', '15:00 ‡∏õ‡∏¥‡∏î‡∏ê‡∏≤‡∏ô'] },
  ],
  launch: [
    { date: '6/10/2568', items: ['‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏ß‡∏±‡∏á‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏Ø', '‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡πà‡∏≤‡∏¢/‡∏ä‡∏µ‡πâ‡πÅ‡∏à‡∏á', '‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ö‡∏ö & ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Deploy'] },
    { date: '7/10/2568', items: ['‡∏ó‡∏î‡∏™‡∏≠‡∏ö Deploy', '‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö/‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏£‡∏ß‡∏î', '‡∏™‡∏±‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏≤‡∏£'] },
    { date: '8/10/2568', items: ['‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏Ñ‡∏û‡∏•‡∏ß‡∏±‡∏ï & ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏π‡πâ ‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô'] },
    { date: '9/10/2568', items: ['‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏Ñ‡∏û‡∏•‡∏ß‡∏±‡∏ï (‡∏ï‡πà‡∏≠)', 'After Party'] },
    { date: '10/10/2568', items: ['‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö / ‡∏û‡∏¥‡∏ò‡∏µ‡∏õ‡∏¥‡∏î / ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö'] },
  ],
};

// ====== Simple KB (Thai-first)
const KB = [
  {
    keys: ['‡∏Ñ‡πà‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£', '‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏¢', 'about', 'rocketcamp', 'rocket camp', 'rocketcamp'],
    answer: () =>
      [
        '‚Ñπ **‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏¢ AC x KMUTT Rocket Camp 2025 (Operated by DTI)**',
        CAMP_OVERVIEW.desc,
        ` ${CAMP_OVERVIEW.where1}`,
        ` ${CAMP_OVERVIEW.where2}`,
        '‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå:',
        ...CAMP_OVERVIEW.perks.map(p => `‚Ä¢ ${p}`),
      ].join('\n'),
  },
  {
    keys: ['‡∏£‡∏≤‡∏Ñ‡∏≤', '‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£', 'price', 'pricing', 'spectator'],
    answer: () =>
      [
        ' **‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£ / Pricing**',
        `‚Ä¢ Spectator: **${CAMP_OVERVIEW.pricing.spectator.toLocaleString()}** ‡∏ö‡∏≤‡∏ó`,
        `‚Ä¢ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß: **${CAMP_OVERVIEW.pricing.individual.toLocaleString()}** ‡∏ö‡∏≤‡∏ó`,
        `‚Ä¢ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡∏° (5‚Äì7 ‡∏Ñ‡∏ô): **${CAMP_OVERVIEW.pricing.team.toLocaleString()}** ‡∏ö‡∏≤‡∏ó`,
        '‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°:',
        ...CAMP_OVERVIEW.pricing.teamNotes.map(t => `- ${t}`),
        '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:',
        ...CAMP_OVERVIEW.pricing.earlyNotes.map(t => `- ${t}`),
      ].join('\n'),
  },
  {
    keys: ['‡∏™‡∏°‡∏±‡∏Ñ‡∏£', 'apply', 'form', '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', 'register', 'registration'],
    answer: () =>
      [
        '**‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏°‡∏±‡∏Ñ‡∏£**',
        `‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß: ${CAMP_OVERVIEW.forms.individual}`,
        `‡∏ó‡∏µ‡∏°: ${CAMP_OVERVIEW.forms.team}`,
      ].join('\n'),
  },
  {
    keys: ['‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', 'contact', 'line', 'facebook'],
    answer: () =>
      [
        ' **‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°**',
        `LINE OA: ${CAMP_OVERVIEW.forms.line}`,
        `Facebook: ${CAMP_OVERVIEW.forms.facebook}`,
      ].join('\n'),
  },
  {
    keys: ['‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà', '‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô', 'where', 'venue', 'map'],
    answer: () => VENUES.map(v => `‚Ä¢ ${v.name}: ${v.url}`).join('\n'),
  },
  {
    keys: ['‡∏ï‡∏≤‡∏£‡∏≤‡∏á', '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£', 'schedule', 'workshop', 'launch', '‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô'],
    answer: () =>
      [
        ' **‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£ (‡∏™‡∏£‡∏∏‡∏õ)**',
        '‚Äî Workshop (1‚Äì3 ‡∏ï.‡∏Ñ. 2568):',
        ...SCHEDULE.workshop.map(d => `‚Ä¢ ${d.date}: ${d.items.join(' | ')}`),
        '‚Äî Launch (6‚Äì10 ‡∏ï.‡∏Ñ. 2568):',
        ...SCHEDULE.launch.map(d => `‚Ä¢ ${d.date}: ${d.items.join(' | ')}`),
        `‡∏û‡∏¥‡∏°‡∏û‡πå \`${PREFIX}schedule workshop\` ‡∏´‡∏£‡∏∑‡∏≠ \`${PREFIX}schedule launch\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î`,
      ].join('\n'),
  },
];

function findKBAnswer(q) {
  const t = q.toLowerCase();
  for (const item of KB) {
    if (item.keys.some(k => t.includes(k.toLowerCase()))) {
      return item.answer();
    }
  }
  return null;
}

// ====== Embeds for commands (kept for manual use)
function makeOverviewEmbed() {
  return new EmbedBuilder()
    .setTitle('AC x KMUTT Rocket Camp 2025 ‚Äî Operated by DTI')
    .setDescription(CAMP_OVERVIEW.desc)
    .addFields(
      { name: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤', value: `‚Ä¢ ${CAMP_OVERVIEW.where1}\n‚Ä¢ ${CAMP_OVERVIEW.where2}` },
      { name: '‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©', value: CAMP_OVERVIEW.perks.map(p => `‚Ä¢ ${p}`).join('\n') },
      {
        name: '‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£',
        value:
          `‚Ä¢ Spectator: **${CAMP_OVERVIEW.pricing.spectator.toLocaleString()}** ‡∏ö‡∏≤‡∏ó\n` +
          `‚Ä¢ ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß: **${CAMP_OVERVIEW.pricing.individual.toLocaleString()}** ‡∏ö‡∏≤‡∏ó\n` +
          `‚Ä¢ ‡∏ó‡∏µ‡∏° (5‚Äì7 ‡∏Ñ‡∏ô): **${CAMP_OVERVIEW.pricing.team.toLocaleString()}** ‡∏ö‡∏≤‡∏ó`
      },
      { name: '‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏°‡∏±‡∏Ñ‡∏£', value: ` ${CAMP_OVERVIEW.forms.individual}\n${CAMP_OVERVIEW.forms.team}` },
    )
    .setFooter({ text: '‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°: LINE OA @spaceac | Facebook: go.spaceac.tech/facebook' });
}

function makeScheduleEmbed(kind) {
  const data = kind === 'launch' ? SCHEDULE.launch : SCHEDULE.workshop;
  const title = kind === 'launch' ? 'Launch Week (6‚Äì10 ‡∏ï.‡∏Ñ. 2568)' : 'Workshop Week (1‚Äì3 ‡∏ï.‡∏Ñ. 2568)';
  const embed = new EmbedBuilder().setTitle(title);
  data.forEach(day => embed.addFields({ name: `‚Ä¢ ${day.date}`, value: day.items.map(x => `- ${x}`).join('\n') }));
  return embed;
}

function makePricingEmbed() {
  return new EmbedBuilder()
    .setTitle('‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£ / Pricing')
    .addFields(
      { name: 'Spectator', value: `**${CAMP_OVERVIEW.pricing.spectator.toLocaleString()}** ‡∏ö‡∏≤‡∏ó`, inline: true },
      { name: '‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (1 ‡∏Ñ‡∏ô)', value: `**${CAMP_OVERVIEW.pricing.individual.toLocaleString()}** ‡∏ö‡∏≤‡∏ó`, inline: true },
      { name: '‡∏ó‡∏µ‡∏° (5‚Äì7 ‡∏Ñ‡∏ô)', value: `**${CAMP_OVERVIEW.pricing.team.toLocaleString()}** ‡∏ö‡∏≤‡∏ó`, inline: true },
    )
    .addFields(
      { name: '‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°', value: CAMP_OVERVIEW.pricing.teamNotes.map(t => `- ${t}`).join('\n') },
      { name: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ Early', value: CAMP_OVERVIEW.pricing.earlyNotes.map(t => `- ${t}`).join('\n') },
    );
}

function makeVenueEmbed() {
  return new EmbedBuilder()
    .setTitle('üó∫Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° / Venues')
    .setDescription(VENUES.map(v => `‚Ä¢ [${v.name}](${v.url})`).join('\n'));
}

// ====== LLM CALLS ======
async function callGemini(prompt) {
  if (!GEMINI_API_KEY) throw new Error('Gemini not configured');

  if (GEMINI_PROVIDER === 'google') {
    const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/${encodeURIComponent(
      GEMINI_MODEL
    )}:generateContent?key=${encodeURIComponent(GEMINI_API_KEY)}`;

    const body = { contents: [{ parts: [{ text: prompt }] }] };

    const resp = await fetch(endpoint, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body),
    });

    if (!resp.ok) throw new Error(`Gemini HTTP ${resp.status}: ${await resp.text().catch(() => '<no body>')}`);

    const json = await resp.json();
    const candidates = json.candidates || [];
    const parts = candidates[0]?.content?.parts || [];
    const text = parts.map(p => p.text).filter(Boolean).join('\n').trim();
    return text || 'No content returned from Gemini.';
  }

  if (!GENERIC_ENDPOINT) throw new Error('Generic endpoint not set');

  const resp = await fetch(GENERIC_ENDPOINT, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${GEMINI_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ prompt }),
  });
  if (!resp.ok) throw new Error(`LLM HTTP ${resp.status}: ${await resp.text().catch(() => '<no body>')}`);
  const json = await resp.json();
  if (typeof json.text === 'string') return json.text;
  if (typeof json.output === 'string') return json.output;
  if (Array.isArray(json.outputs) && json.outputs[0]?.text) return json.outputs[0].text;
  return JSON.stringify(json, null, 2);
}

// ====== RATE LIMITING ======
const perUserCooldown = new Map(); 
const perChannelBuckets = new Map(); 

function canReply(channelId, userId) {
  const now = Date.now();

  // per-user cooldown
  const key = `${channelId}:${userId}`;
  const last = perUserCooldown.get(key) || 0;
  if (now - last < COOLDOWN_S * 1000) return false;

  // per-channel token bucket 
  const b = perChannelBuckets.get(channelId) || { count: 0, windowStartMs: now };
  if (now - b.windowStartMs > 60_000) {
    b.count = 0;
    b.windowStartMs = now;
  }
  if (b.count >= MAX_PER_MIN) return false;

  // record tentative usage
  perUserCooldown.set(key, now);
  b.count += 1;
  perChannelBuckets.set(channelId, b);
  return true;
}

// ====== DECISION HEURISTICS ======
function looksLikeAQuestion(text) {
  const t = text.trim();
  if (!t) return false;
  // question marks or Thai interrogatives
  return /[?Ôºü]$/.test(t) ||
    /(‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£|‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£|‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô|‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà|‡∏ó‡∏≥‡πÑ‡∏°|‡∏£‡∏≤‡∏Ñ‡∏≤|‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£|‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏°‡∏±‡∏Ñ‡∏£|‡∏ï‡∏≤‡∏£‡∏≤‡∏á|‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£|Where|When|How|Price|Cost)/i.test(t) ||
    /(rocket|‡∏à‡∏£‡∏ß‡∏î|‡∏Ñ‡πà‡∏≤‡∏¢|‡∏™‡∏°‡∏±‡∏Ñ‡∏£|‡∏£‡∏≤‡∏Ñ‡∏≤|‡∏ß‡∏±‡∏á‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå|KMUTT|DTI|PTT|SPACE\s?AC)/i.test(t);
}

function channelAllowed(channel) {
  if (!AUTO_REPLY) return false;
  if (!ALLOWED_CHANNELS.length) return true;
  return ALLOWED_CHANNELS.includes(channel.id);
}

// ====== MESSAGE HANDLER  ======
client.on('messageCreate', async (message) => {
  try {
    if (message.author.bot) return;
    if (message.channel?.type !== ChannelType.GuildText && message.channel?.type !== ChannelType.PublicThread) return;

    const content = message.content || '';

    // ---------- 1) Manual commands with prefix ----------
    if (content.startsWith(PREFIX)) {
      const args = content.slice(PREFIX.length).trim().split(/\s+/);
      const cmd = (args.shift() || '').toLowerCase();

      if (cmd === 'help') {
        return message.reply(
          [
            '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:',
            `‚Ä¢ \`${PREFIX}rocketcamp\` ‚Äî ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏¢ (TH)`,
            `‚Ä¢ \`${PREFIX}schedule workshop|launch\` ‚Äî ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°`,
            `‚Ä¢ \`${PREFIX}price\` ‚Äî ‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£`,
            `‚Ä¢ \`${PREFIX}apply\` ‚Äî ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏°‡∏±‡∏Ñ‡∏£`,
            `‚Ä¢ \`${PREFIX}contact\` ‚Äî ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠`,
            `‚Ä¢ \`${PREFIX}venue\` ‚Äî ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà`,
            `‚Ä¢ \`${PREFIX}ask <‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°>\` ‚Äî ‡∏ñ‡∏≤‡∏° AI (‡πÉ‡∏ä‡πâ Gemini ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß)`,
            `‚Ä¢ \`${PREFIX}help\` ‚Äî ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á`,
          ].join('\n')
        );
      }

      if (cmd === 'rocketcamp') return message.channel.send({ embeds: [makeOverviewEmbed()] });

      if (cmd === 'schedule') {
        const sub = (args[0] || '').toLowerCase();
        if (!sub || !['workshop', 'launch'].includes(sub)) {
          return message.reply(`‡πÉ‡∏ä‡πâ: \`${PREFIX}schedule workshop\` ‡∏´‡∏£‡∏∑‡∏≠ \`${PREFIX}schedule launch\``);
        }
        return message.channel.send({ embeds: [makeScheduleEmbed(sub)] });
      }

      if (cmd === 'price') return message.channel.send({ embeds: [makePricingEmbed()] });

      if (cmd === 'apply') {
        return message.reply(` ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏°‡∏±‡∏Ñ‡∏£:\n ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß: ${CAMP_OVERVIEW.forms.individual}\n ‡∏ó‡∏µ‡∏°: ${CAMP_OVERVIEW.forms.team}`);
      }

      if (cmd === 'contact') {
        return message.reply(` ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: LINE OA ${CAMP_OVERVIEW.forms.line}\nFacebook: ${CAMP_OVERVIEW.forms.facebook}`);
      }

      if (cmd === 'venue') return message.channel.send({ embeds: [makeVenueEmbed()] });

      if (cmd === 'ask') {
        const q = args.join(' ');
        if (!q) return message.reply(`‡∏û‡∏¥‡∏°‡∏û‡πå: \`${PREFIX}ask <‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°>\``);

        await message.channel.sendTyping();

        const kbAns = findKBAnswer(q);
        if (kbAns) return message.reply(kbAns.length > 1900 ? kbAns.slice(0, 1900) + '\n...[truncated]' : kbAns);

        if (GEMINI_API_KEY) {
          const context = [
            'You are the information bot for "AC x KMUTT Rocket Camp 2025 ‚Äî Operated by DTI" (Thai).',
            'Answer in Thai. Be concise and accurate.',
            CAMP_OVERVIEW.desc,
            VENUES.map(v => `- ${v.name}: ${v.url}`).join('\n'),
            `Prices: spectator ${CAMP_OVERVIEW.pricing.spectator} THB, individual ${CAMP_OVERVIEW.pricing.individual} THB, team ${CAMP_OVERVIEW.pricing.team} THB`,
            `Forms: ${CAMP_OVERVIEW.forms.individual} | ${CAMP_OVERVIEW.forms.team}`,
            'Workshop:',
            SCHEDULE.workshop.map(d => `${d.date}: ${d.items.join(' | ')}`).join('\n'),
            'Launch:',
            SCHEDULE.launch.map(d => `${d.date}: ${d.items.join(' | ')}`).join('\n'),
            `Question: ${q}`,
          ].join('\n');

          try {
            const llmReply = await callGemini(context);
            const safe = llmReply.length > 1900 ? llmReply.slice(0, 1900) + '\n...[truncated]' : llmReply;
            return message.reply(safe);
          } catch (e) { return message.reply('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ AI ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'); }
        }

        return message.reply('‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: `!rocketcamp`, `!schedule`, `!price`, `!apply`');
      }

      return;
    }

    if (!channelAllowed(message.channel)) return;
    if (!looksLikeAQuestion(content)) return;
    if (!canReply(message.channel.id, message.author.id)) return;

    await message.channel.sendTyping();

    const kbAns = findKBAnswer(content);
    const replyText = kbAns ? kbAns : await (async () => {
      if (GEMINI_API_KEY) {
        const context = [
          'You are the information bot for "AC x KMUTT Rocket Camp 2025 ‚Äî Operated by DTI" (Thai).',
          'Answer in Thai. Be concise and accurate.',
          CAMP_OVERVIEW.desc,
          `‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${CAMP_OVERVIEW.where1} | ${CAMP_OVERVIEW.where2}`,
          `‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£: spectator ${CAMP_OVERVIEW.pricing.spectator} THB, individual ${CAMP_OVERVIEW.pricing.individual} THB, team ${CAMP_OVERVIEW.pricing.team} THB`,
          `‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏°‡∏±‡∏Ñ‡∏£: ${CAMP_OVERVIEW.forms.individual} | ${CAMP_OVERVIEW.forms.team}`,
          '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠:',
          'Workshop: ' + SCHEDULE.workshop.map(d => `${d.date}: ${d.items.join(' | ')}`).join(' ; '),
          'Launch: ' + SCHEDULE.launch.map(d => `${d.date}: ${d.items.join(' | ')}`).join(' ; '),
          `‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${content}`,
        ].join('\n');

        try {
          const llmReply = await callGemini(context);
          return llmReply || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°';
        } catch {
        }
      }
      return '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡∏ö  ‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: `!rocketcamp`, `!schedule`, `!price`, `!apply` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏™‡∏£‡∏∏‡∏õ';
    })();

    const safe = replyText.length > 1900 ? replyText.slice(0, 1900) + '\n...[truncated]' : replyText;

    if (USE_THREADS && message.channel.type === ChannelType.GuildText) {

      const threadName = `Q&A: ${message.author.username}`.slice(0, 80);
      const thread = await message.startThread({
        name: threadName,
        autoArchiveDuration: 60, 
      }).catch(() => null);

      if (thread) {
        return thread.send(safe);
      }
    }
    return message.reply(safe);
  } catch (err) {
    console.error('Handler error:', err);
  }
});

client.login(TOKEN);
